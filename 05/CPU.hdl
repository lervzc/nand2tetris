// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=toA);

    Not(in=instruction[15], out=isA);
    Or(a=instruction[5], b=isA, out=loadA);
    ARegister(in=toA, load=loadA, out=Aout, out[0..14]=addressM); // A Reg

    // a - instruction[12]
    Mux16(a=Aout, b=inM, sel=instruction[12],out=outMorA);
    // d2 - instruction[4]
    // d3 - instruction[3]
    And(a=instruction[3], b=instruction[15], out=writeM);

    And(a=instruction[4], b=instruction[15],out=loadD);
    DRegister(in=ALUout, load=loadD, out=Dout); // D reg
    // instruction - ‘i xx a cccccc ddd jjj’
    //                1 11 0 001100 000 001
    // i-instruction[15]
    // c6 to c1 instruction[6..11]
    ALU(x=Dout, y=outMorA, out=ALUout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, zr=zr, ng=ng);
    //zr, // 1 if (out == 0), 0 otherwise
    //ng; // 1 if (out < 0),  0 otherwise
    Or(a=zr, b=ng, out=ngr);
    Not(in=ngr,out=gr);
    //gr; // i if (out > 0)
    //j3 instruction[0] out > 0
    //j2 instruction[1] out == 0
    //j1 instruction[2] out < 0
    And(a=ng, b=instruction[2], out=lesser);
    And(a=zr, b=instruction[1], out=zero);
    And(a=gr, b=instruction[0], out=greater);
    Or(a=lesser, b=zero,out=JLE);
    Or(a=JLE, b=greater,out=toLoadPC);
    And(a=toLoadPC, b=instruction[15], out=loadPC); // ensure it is C-instruction
    Not(in=loadPC, out=incPC);
    PC(in=Aout, inc=incPC, load=loadPC, reset=reset, out[0..14]=pc);
}